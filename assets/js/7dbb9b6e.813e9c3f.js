(self.webpackChunk=self.webpackChunk||[]).push([[1970],{3905:(e,t,a)=>{"use strict";a.d(t,{Zo:()=>s,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),u=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=u(a),d=r,k=m["".concat(p,".").concat(d)]||m[d]||c[d]||l;return a?n.createElement(k,i(i({ref:t},s),{},{components:a})):n.createElement(k,i({ref:t},s))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},4680:(e,t,a)=>{"use strict";a.r(t),a.d(t,{frontMatter:()=>i,metadata:()=>o,toc:()=>p,default:()=>s});var n=a(2122),r=a(9756),l=(a(7294),a(3905)),i={},o={unversionedId:"pythonapi",id:"pythonapi",isDocsHomePage:!1,title:"Table of Contents",description:"* uclchem",source:"@site/docs/pythonapi.md",sourceDirName:".",slug:"/pythonapi",permalink:"/docs/pythonapi",version:"current",lastUpdatedBy:"jonholdship",lastUpdatedAt:1621867778,formattedLastUpdatedAt:"5/24/2021",frontMatter:{},sidebar:"docs",previous:{title:"Running Your First Models",permalink:"/docs/pythonstart"},next:{title:"Physics Modules",permalink:"/docs/physics"}},p=[],u={toc:p};function s(e){var t=e.components,a=(0,r.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#uclchem"},"uclchem"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#uclchem.run_model"},"run","_","model")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#uclchem.run_model_for_abundances"},"run","_","model","_","for","_","abundances")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#uclchem.get_species_rates"},"get","_","species","_","rates")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#uclchem.read_output_file"},"read","_","output","_","file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#uclchem.create_abundance_plot"},"create","_","abundance","_","plot")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#uclchem.plot_species"},"plot","_","species")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#uclchem.param_dict_from_output"},"param","_","dict","_","from","_","output")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#uclchem.get_rates_of_change"},"get","_","rates","_","of","_","change")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#uclchem.count_element"},"count","_","element")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#uclchem.total_element_abundance"},"total","_","element","_","abundance")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#uclchem.check_element_conservation"},"check","_","element","_","conservation"))))),(0,l.kt)("a",{id:"uclchem"}),(0,l.kt)("h1",{id:"uclchem"},"uclchem"),(0,l.kt)("a",{id:"uclchem.run_model"}),(0,l.kt)("h4",{id:"run_model"},"run","_","model"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def run_model(param_dict)\n")),(0,l.kt)("p",null,"Run UCLCHEM using variables taking from a dictionary of parameter values. Any parameter\nnot included in the dictionary will be taken from defaultparameters.f90."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"param_dict"),": A dictionary of parameters where keys are any of the variables in defaultparameters.f90 and values are value for current run.")),(0,l.kt)("a",{id:"uclchem.run_model_for_abundances"}),(0,l.kt)("h4",{id:"run_model_for_abundances"},"run","_","model","_","for","_","abundances"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def run_model_for_abundances(param_dict)\n")),(0,l.kt)("p",null,"Run UCLCHEM, returning the abundances of up to 50 species at the end of the run. The species that will be returned are those from the ",(0,l.kt)("inlineCode",{parentName:"p"},"outSpecies")," parameter."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"param_dict"),": A dictionary of parameters where keys are any of the variables in defaultparameters.f90 and values are value for current run.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"(ndarray) Array of abundances of all species in ",(0,l.kt)("inlineCode",{parentName:"p"},"outSpecies")),(0,l.kt)("a",{id:"uclchem.get_species_rates"}),(0,l.kt)("h4",{id:"get_species_rates"},"get","_","species","_","rates"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_species_rates(param_dict, input_abundances, reac_indxs)\n")),(0,l.kt)("p",null,"Get the rate of up to 500 reactions from UCLCHEM for a given set of parameters and abundances.\nIntended for use within the analysis script."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"param_dict"),": A dictionary of parameters where keys are any of the variables in defaultparameters.f90 and values are value for current run."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"input_abundances"),": Abundance of every species in network"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"reac_indxs"),": Index of reactions of interest in the network's reaction list.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"(ndarray) Array containing the rate of every reaction specified by reac_indxs"),(0,l.kt)("a",{id:"uclchem.read_output_file"}),(0,l.kt)("h4",{id:"read_output_file"},"read","_","output","_","file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def read_output_file(output_file)\n")),(0,l.kt)("p",null,"Read the output of a UCLCHEM run created with the outputFile parameter into a pandas DataFrame"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"output_file"),": - (str) path to file containing a full UCLCHEM output")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"(dataframe) A dataframe containing the abundances and physical parameters of the model at every time step."),(0,l.kt)("a",{id:"uclchem.create_abundance_plot"}),(0,l.kt)("h4",{id:"create_abundance_plot"},"create","_","abundance","_","plot"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def create_abundance_plot(df, species, plot_file=None)\n")),(0,l.kt)("p",null,"Produce a plot of the abundances of chosen species through time, returning the pyplot\nfigure and axis objects"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"df"),": A dataframe created by ",(0,l.kt)("inlineCode",{parentName:"li"},"read_output_file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"species"),": A list of species names to be plotted"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"plot_file"),": optional argument with path to file where the plot should be saved")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"fig (matplotlib figure) A figure object and ax (matplotlib axis) An axis object which contains the plot"),(0,l.kt)("a",{id:"uclchem.plot_species"}),(0,l.kt)("h4",{id:"plot_species"},"plot","_","species"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def plot_species(ax, df, species)\n")),(0,l.kt)("p",null,"Plot the abundance of several species through time onto an existing pyplot axis"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ax"),": pyplot axis on which to plot"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"df"),": A dataframe created by ",(0,l.kt)("inlineCode",{parentName:"li"},"read_output_file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"species"),": A list of species names to be plotted")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"ax (matplotlib ax) The input axis is returned"),(0,l.kt)("a",{id:"uclchem.param_dict_from_output"}),(0,l.kt)("h4",{id:"param_dict_from_output"},"param","_","dict","_","from","_","output"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def param_dict_from_output(output_line)\n")),(0,l.kt)("p",null,"Generate a parameter dictionary with enough variables to correctly estimate the rates of\nreactions."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"output_line"),": (pandas series) any row from the relevant UCLCHEM output")),(0,l.kt)("a",{id:"uclchem.get_rates_of_change"}),(0,l.kt)("h4",{id:"get_rates_of_change"},"get","_","rates","_","of","_","change"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_rates_of_change(rates, reactions, speciesList, species, row)\n")),(0,l.kt)("p",null,"Calculate the terms in the rate of equation of a particular species using rates calculated using\nget_species_rates() and a row from the full output of UCLCHEM. See ",(0,l.kt)("inlineCode",{parentName:"p"},"analysis.py")," for intended use."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"rates"),": (ndarray) Array of all reaction rates for a species, as obtained from ",(0,l.kt)("inlineCode",{parentName:"li"},"get_species_rates")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"reactions"),": (ndarray) Array containing reactions as lists of reactants and products"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"speciesList"),": (ndarray) Array of all species names in network"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"species"),": (str) Name of species for which rates of change are calculated"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"row"),": (panda series) The UCLCHEM output row from the time step at which you want the rate of change")),(0,l.kt)("a",{id:"uclchem.count_element"}),(0,l.kt)("h4",{id:"count_element"},"count","_","element"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def count_element(species_list, element)\n")),(0,l.kt)("p",null,"Count the number of atoms of an element that appear in each of a list of species,\nreturn the array of counts"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"species_list"),": (iterable, str), list of species names"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"element"),": (str), element")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"sums (ndarray) array where each element represents the number of atoms of the chemical element in the corresponding element of species_list"),(0,l.kt)("a",{id:"uclchem.total_element_abundance"}),(0,l.kt)("h4",{id:"total_element_abundance"},"total","_","element","_","abundance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def total_element_abundance(element, df)\n")),(0,l.kt)("p",null,"Calculates that the total elemental abundance of a species as a function of time. Allows you to check conservation."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"element"),': (str) Element symbol. eg "C"'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"df"),": (pandas dataframe) UCLCHEM output in format from ",(0,l.kt)("inlineCode",{parentName:"li"},"read_output_file"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"Series containing the total abundance of an element at every time step of your output"),(0,l.kt)("a",{id:"uclchem.check_element_conservation"}),(0,l.kt)("h4",{id:"check_element_conservation"},"check","_","element","_","conservation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def check_element_conservation(df)\n")),(0,l.kt)("p",null,"Check the conservation of major element by comparing total abundance at start and end of model"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"df"),": (pandas dataframe): UCLCHEM output in format from ",(0,l.kt)("inlineCode",{parentName:"li"},"read_output_file"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"(dict) Dictionary containing the change in the total abundance of each element as a fraction of initial value"))}s.isMDXComponent=!0}}]);