(self.webpackChunk=self.webpackChunk||[]).push([[6953],{9938:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var a=n(3552),r=n(2611),l=n(7294),i=function(e){return l.createElement("div",e)},c=function(e){return l.createElement("div",e)},o=function(e){function t(){return e.apply(this,arguments)||this}return(0,a.Z)(t,e),t.prototype.render=function(){var e=this.props,t=e.siteConfig,n=(e.language,t.baseUrl,t.docsUrl,function(e){return l.createElement("div",{className:"homeContainer"},l.createElement("div",{className:"homeSplashFade"},l.createElement("div",{className:"wrapper homeWrapper"},e.children)))}),a=function(e){return l.createElement("h2",{className:"projectTitle"},e.title,l.createElement("small",null,e.tagline))},r=function(e){return l.createElement("div",{className:"section promoSection"},l.createElement("div",{className:"promoRow"},l.createElement("div",{className:"pluginRowBlock"},e.children)))},i=function(e){return l.createElement("div",{className:"pluginWrapper buttonWrapper"},l.createElement("a",{className:"button",href:e.href,target:e.target},e.children))};return l.createElement(n,null,l.createElement("div",{className:"inner"},l.createElement(a,{tagline:"A spectral model and RADEX wrap in Python 3",title:"SpectralRadex"}),l.createElement(r,null,l.createElement(i,{href:"https://github.com/jonholdship/spectralradex"},"View on GitHub"),l.createElement(i,{href:"https://github.com/jonholdship/spectralradex/zipball/master"},"Get a Zip "),l.createElement(i,{href:"https://github.com/jonholdship/spectralradex/tarball/master"},"Get a Tarball"))))},t}(l.Component),s=function(e){function t(){return e.apply(this,arguments)||this}return(0,a.Z)(t,e),t.prototype.render=function(){var e=this.props,t=e.config,n=e.language,a=void 0===n?"":n,r=t.baseUrl,s=function(e){return l.createElement(i,{padding:["bottom","top"],id:e.id,background:e.background},l.createElement(c,{align:"center",contents:e.children,layout:e.layout}))},u=function(){return l.createElement(s,{background:"light"},[{content:"<p>SpectralRadex makes use of numpy's F2PY compiler to create a python module. Run RADEX from within your python scripts with no subprocesses, no input files and no fuss. We've even updated the base code to modern fortran to remove COMMON blocks and prevent any multiprocessing concerns. <p> Use Python dictionaries to set parameters and receive results as pandas dataframes. Check our readthedocs for an API guide to the functions we built around the core RADEX functionality",image:r+"img/undraw_gift1_sgf8.svg",imageAlign:"right",align:"left",title:"RADEX Wrapped"}])},m=function(){return l.createElement(s,null,[{content:"RADEX calculates the excitation temperature of every transition and optical depth from line centre. From this, a simple spectral model calculates the intensity at a supplied list of frequencies by assuming the optical depth of each line is .",image:r+"img/undraw_upgrade_06a0.svg",imageAlign:"left",align:"right",title:"RADEX Extended"}])};return l.createElement("div",null,l.createElement(o,{siteConfig:t,language:a}),l.createElement("div",{className:"mainContainer"},l.createElement(u,null),l.createElement(m,null)))},t}(l.Component);const u=function(e){return l.createElement(r.Z,null,l.createElement(s,e))}}}]);