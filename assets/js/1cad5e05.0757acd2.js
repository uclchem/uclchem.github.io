(self.webpackChunk=self.webpackChunk||[]).push([[1536],{3905:(e,t,a)=>{"use strict";a.d(t,{Zo:()=>c,kt:()=>m});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var p=n.createContext({}),i=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=i(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=i(a),m=o,h=u["".concat(p,".").concat(m)]||u[m]||d[m]||r;return a?n.createElement(h,l(l({ref:t},c),{},{components:a})):n.createElement(h,l({ref:t},c))}));function m(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,l=new Array(r);l[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var i=2;i<r;i++)l[i]=a[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},512:(e,t,a)=>{"use strict";a.r(t),a.d(t,{frontMatter:()=>l,metadata:()=>s,toc:()=>p,default:()=>c});var n=a(2122),o=a(9756),r=(a(7294),a(3905)),l={id:"pythonstart",title:"Python Examples"},s={unversionedId:"pythonstart",id:"pythonstart",isDocsHomePage:!1,title:"Running Your First Models",description:"A Jupyter notebook in the Python/ demonstrates how to use the Python UCLCHEM module. This page was automatically generated from that notebook.",source:"@site/docs/first_models.md",sourceDirName:".",slug:"/pythonstart",permalink:"/docs/pythonstart",version:"current",lastUpdatedBy:"jonholdship",lastUpdatedAt:1633447119,formattedLastUpdatedAt:"10/5/2021",frontMatter:{id:"pythonstart",title:"Python Examples"},sidebar:"docs",previous:{title:"Compiling for Python",permalink:"/docs/pythoncompiling"},next:{title:"Table of Contents",permalink:"/docs/pythonapi"}},p=[],i={toc:p};function c(e){var t=e.components,l=(0,o.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,n.Z)({},i,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A Jupyter notebook in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Python/")," demonstrates how to use the Python UCLCHEM module. This page was automatically generated from that notebook."),(0,r.kt)("p",null,"In this example, we'll run three UCLCHEM models using the cloud model and the python wrapper. We'll also use the python module to plot the results."),(0,r.kt)("p",null,"Note, we ran this from the ",(0,r.kt)("inlineCode",{parentName:"p"},"Python/")," directory meaning ",(0,r.kt)("inlineCode",{parentName:"p"},"Python/uclchem/")," was in our PATH. You can run scripts elsewhere but ",(0,r.kt)("inlineCode",{parentName:"p"},"Python/uclchem/")," must either be copied to that location or added to your PYTHON_PATH environmental variable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import uclchem\nimport pandas as pd\nimport matplotlib.pyplot as plt\n")),(0,r.kt)("h1",{id:"phase-1"},"Phase 1"),(0,r.kt)("p",null,'It\'s typical when running UCLCHEM to run the model in two phases. If, for example, one wishes to model a hot core, the gas should be well processed by the time the protostar "turns on". This could be achieved by initializing the abundances to some known values for a prestellar core but instead we do the following:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Run a model starting from some very diffuse, atomic gas"),(0,r.kt)("li",{parentName:"ul"},"Allow it to collapse in freefall to the density of the object we wish to model"),(0,r.kt)("li",{parentName:"ul"},"Store the abundances as the initial abundances for the hot core model")),(0,r.kt)("p",null,"UCLCHEM is set up to do this through the ",(0,r.kt)("inlineCode",{parentName:"p"},"phase")," parameter. All physics modules will model a homogenous cloud that can collapse under freefall when ",(0,r.kt)("inlineCode",{parentName:"p"},"phase=1")," and then they do their specific physical model when ",(0,r.kt)("inlineCode",{parentName:"p"},"phase=2")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'#set a parameter dictionary for phase 1 collapse model\n\noutSpecies="SO CO"\nparam_dict = {"phase": 1, "switch": 1, "collapse": 1, "readAbunds": 0, "writeStep": 1,\n               "outSpecies": outSpecies, "initialDens": 1e2, "initialTemp":10.0,\n               "finalDens":1e5, "finalTime":5.0e6,\n               "outputFile":"../examples/test-output/phase1-full.dat",\n               "abundSaveFile":"../examples/test-output/startcollapse.dat"}\nuclchem.run_model(param_dict)\n\n')),(0,r.kt)("p",null,"We can look at the output for that model by using pandas to read the file (skipping 2 rows to miss the header) and matplotlib to view abundances."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'phase1_df=uclchem.read_output_file("../examples/test-output/phase1-full.dat")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'species=["CO","#CO","HCN","#HCN"]\nfig,ax=uclchem.create_abundance_plot(phase1_df,species)\nax=ax.set(xscale="log")\n')),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"png",src:a(9425).Z})),(0,r.kt)("h1",{id:"phase-2"},"Phase 2"),(0,r.kt)("p",null,"Note the ",(0,r.kt)("inlineCode",{parentName:"p"},"abundFile")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"readAbunds")," parameters in our phase 1 model. If ",(0,r.kt)("inlineCode",{parentName:"p"},"readAbunds")," is set to 0 then the abundances at the end of the model are written to ",(0,r.kt)("inlineCode",{parentName:"p"},"abundFile"),". If, instead, ",(0,r.kt)("inlineCode",{parentName:"p"},"readAbunds")," is set to 1, the initial abundances are read from that file. Thus by switching ",(0,r.kt)("inlineCode",{parentName:"p"},"readAbunds")," over, we can run phase 2 starting from the final abundances of the previous model."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'#read old abundances and do hot core behaviour\nparam_dict["readAbunds"]=1\nparam_dict["phase"]=2\n\n#change other bits of input to set up phase 2\nparam_dict["initialDens"]=1e5\nparam_dict["tempindx"]=3 #selects mass of protostar (see cloud.f90)\nparam_dict["finalTime"]=1e6\nparam_dict["switch"]=0\n\nparam_dict.pop("abundSaveFile") #this is still set to startcollapse.dat from phase 1 so remove it or change it.\nparam_dict["abundLoadFile"]="../examples/test-output/startcollapse.dat"\nparam_dict["outputFile"]="../examples/test-output/phase1-full.dat"\n\n\nuclchem.run_model(param_dict)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'phase2_df=uclchem.read_output_file("../examples/test-output/phase2-full.dat")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'species=["CO","H2O","CH3OH","#CO","#H2O","#CH3OH"]\n\nfig,[ax,ax2]=plt.subplots(1,2,figsize=(16,9))\nax=uclchem.plot_species(ax,phase2_df,species)\nsettings=ax.set(yscale="log",xlim=(1,1e6),ylim=(1e-10,1e-2),\n            xlabel="Time / years", \n            ylabel="Fractional Abundance",xscale="log")\n\nax2.plot(phase2_df["Time"],phase2_df["Density"],color="black")\nax3=ax2.twinx()\nax3.plot(phase2_df["Time"],phase2_df["gasTemp"],color="red")\nax2.set(xlabel="Time / year",ylabel="Density")\nax3.set(ylabel="Temperature",facecolor="red",xlim=(0,1e6))\nax3.tick_params(axis=\'y\', colors=\'red\')\n')),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"png",src:a(4413).Z})))}c.isMDXComponent=!0},4413:(e,t,a)=>{"use strict";a.d(t,{Z:()=>n});const n=a.p+"assets/images/first_models_10_0-83699489f5c356d667117d8b36b011d1.png"},9425:(e,t,a)=>{"use strict";a.d(t,{Z:()=>n});const n=a.p+"assets/images/first_models_6_0-fbda7143a7245073a772d0f2b647b0ba.png"}}]);